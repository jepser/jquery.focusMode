!function (t) {var s = function (s, e) {this._defaults = {target: 'p',classes: {body: 'is-focus-active',container: 'focus-container',element: 'focus-target'},offsetIn: '0%',offsetOut: '0%'}, this._options = t.extend(!0, {}, this._defaults, e), this.options = function (s) {return s ? t.extend(!0, this._options, s) : this._options}, this.animationOffset = function () {var t = this.options()
      return {'in': parseFloat(t.offsetIn) / 100,out: parseFloat(t.offsetOut) / 100}}, this.elements = [], this.init = function () {var e = this.options(),o = this
      e.classes.body && t('body').addClass(e.classes.body), s.data('focusmode', this).addClass(e.classes.container), s.find(e.target).each(function (s, i) {t(i).addClass(e.classes.element), o.elements.push(i)}), t(window).on('scroll.focusMode', {plugin: o,elements: o.elements}, this.scroll)}, this.scroll = function (s) {var e = t(window).height(),o = t(window).scrollTop(),i = s.data.plugin,n = i.animationOffset()
      t.each(s.data.elements, function (s, i) {var a = {top: t(i).offset().top,height: t(i).outerHeight(!0)}
        o + e * (1 - n['in']) > a.top && o + e * n.out < a.top + a.height ? t(i).addClass('is-active') : t(i).removeClass('is-active')})}, this.destroy = function () {var e = this.options()
      t('body').removeClass(e.classes.body), s.removeClass(e.classes.container).find(e.target).each(function (s, o) {t(o).removeClass(e.classes.element)}), t(window).off('scroll.focusMode'), s.data('focusmode', !1)}}
  t.fn.focusMode = function (e) {function o () {var e = t(this),o = new s(e, n)
      o.init()}var i = 'string' == typeof e ? e : void 0
    if (!i) {var n = 'object' == typeof e ? e : void 0
      return this.each(o)}var a = t(this).data('focusmode')
    a && 'function' == typeof a[i] && a[i]()}}(jQuery)
